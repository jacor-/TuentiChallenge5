'''
After hours trying to solve this problem... this is my solution. Previously
I tried some heuristics, brute force algorithms and a lot of types or prunning.

After some hours, I realized that probably I was complicating everything too much.

This is my final solution!


For each ship we will consider the following: 

IF
- Destroying A implies destroying the set S_a
- Destroying B implies destroying the set S_b
- B is in S_a
THEN
- Destroying A implies destroying S_b

With this reasoning we make 'upper nodes' heritage the destruction chain
of their children and mark them as 'non requiring shot'.

At the end of the algorithm, we only shot to those nodes which 'require a shot'.

For this algorithm is very important to compute the full reachable map, i.e., 
the entire node chain reachable by a shot! If you do not do this the problem
becomes dependent on the order you shot the ships, which is absolutely undersirable
and do not allow you to solve this problem in just an (almost) linear pass on the ships.

'''

import numpy
import fileinput
import time

'''
This function tell us if a point is inside a given polygon
'''
def point_in_poly(x,y,poly):

    n = len(poly)
    inside = False

    p1x,p1y = poly[0]
    for i in range(n+1):
        p2x,p2y = poly[i % n]
        if y > min(p1y,p2y):
            if y <= max(p1y,p2y):
                if x <= max(p1x,p2x):
                    if p1y != p2y:
                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x
                    if p1x == p2x or x <= xints:
                        inside = not inside
        p1x,p1y = p2x,p2y

    return inside

'''
Lets build a map which tell us which set of ships is destroyed if we shot the i-th
ship. (a 1 in the position i,j will mean that the ship j will be destroyed by the
chain generated when i is destroyed.
'''
    
def createDirectlyReachableMaps(ships):
    directly_reachable = [[] for _ in ships]
    for i_ship in range(len(ships)):
        (x1,y1),poly1  = ships[i_ship]
        for j_ship in range(len(ships)):
            (x2,y2),poly2  = ships[j_ship]
            if point_in_poly(x2,y2,poly1):
                directly_reachable[i_ship].append(j_ship)
    return directly_reachable

def createFullReachableMaps(directly_reachable):
    def canReach(i,directly):
        is_reachable_reach = []
        now_reachable = [i]
        while len(now_reachable) != 0:
            reaching = now_reachable.pop()
            for j in directly[reaching]:
                if j not in is_reachable_reach:
                    now_reachable.append(j)
                    is_reachable_reach.append(j)
        return is_reachable_reach
    reachable = [canReach(i,directly_reachable) for i in range(len(directly_reachable))]
    for now_ship in range(len(reachable)):
        reachable[now_ship].remove(now_ship)
    return reachable


def createInverseReachableMaps(sparse_ship_reachs):
    inverse_map = [[] for _ in range(len(sparse_ship_reachs))]
    for i_reaches in range(len(sparse_ship_reachs)):
        for i_is_reached in sparse_ship_reachs[i_reaches]:
            inverse_map[i_is_reached].append(i_reaches)
    return inverse_map

if __name__ == "__main__":    
    '''
    First of all we read the input
    '''
    ships = []    
    inp = fileinput.input()
    num_ships = int(inp.next()[:-1])
    for _ in range(num_ships):
        x,y = map(int, inp.next()[:-1].split(" "))
        ships.append(((x,y),[]))
        num_vertex = int(inp.next()[:-1])
        vertexs = inp.next()[:-1].split(" ")
        for j in range(num_vertex):
            ships[-1][-1].append((int(vertexs[2*j]),int(vertexs[2*j+1])))

    '''
    We build a structure which stores which ships will be destroyed if a specific
    ship is shot (we consider the chain generated by the shot).
    '''                
    directly_reachable = createFullReachableMaps(createDirectlyReachableMaps(ships))    
    unreachable_ships = numpy.ones(len(directly_reachable))
    '''
    Now its the time... lets get our result!
    '''
    for now_ship in range(len(directly_reachable)):
        while len(directly_reachable[now_ship]) > 0:
            other_ship = directly_reachable[now_ship].pop()
            unreachable_ships[other_ship] = -1

            reachable_by_other_ship = directly_reachable[other_ship]
            directly_reachable[other_ship] = []
            directly_reachable[now_ship] = list(set(directly_reachable[now_ship] + reachable_by_other_ship))
            if now_ship in directly_reachable[now_ship]:
                directly_reachable[now_ship].remove(now_ship)

    print numpy.sum(unreachable_ships == 1)
                
